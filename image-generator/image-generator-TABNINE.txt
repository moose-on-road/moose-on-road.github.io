import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from PIL import Image
import io
import time

def find_files(directory, extensions):
    """Find files in a directory that match the given extensions."""
    files = []
    for ext in extensions:
        files.extend([f for f in os.listdir(directory) if f.endswith(ext)])
    return files

def generate_thumbnail(model_path, output_path):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    
    try:
        # Create a temporary HTML file with the model-viewer
        temp_html = f"""
        <html>
        <body>
        <model-viewer src="{model_path}" ar ar-modes="webxr scene-viewer quick-look" camera-controls shadow-intensity="1" exposure="2" style="width: 640px; height: 480px;">
        </model-viewer>
        <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/3.4.0/model-viewer.min.js"></script>
        </body>
        </html>
        """
        with open('temp.html', 'w') as f:
            f.write(temp_html)

        # Load the temporary HTML file
        driver.get('file://' + os.path.abspath('temp.html'))

        # Wait for the model to load
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "model-viewer"))
        )

        # Give some time for the model to render
        time.sleep(5)

        # Capture the screenshot
        element = driver.find_element(By.TAG_NAME, 'model-viewer')
        screenshot = element.screenshot_as_png

        # Convert to webp
        image = Image.open(io.BytesIO(screenshot))
        image.save(output_path, 'WEBP')

        print(f"Generated thumbnail: {output_path}")

    finally:
        driver.quit()
        os.remove('temp.html')

def process_directory(directory):
    print(f"Processing directory: {directory}")
    
    model_exts = ['.glb']
    image_exts = ['.webp']

    models = find_files(directory, model_exts)
    images = find_files(directory, image_exts)

    for model in models:
        model_name = os.path.splitext(model)[0]
        poster_path = f"{model_name}.webp"
        
        if poster_path not in images:
            full_model_path = f"https://moose-on-road.github.io/products/{os.path.basename(directory)}/{model}"
            output_path = os.path.join(directory, poster_path)
            generate_thumbnail(full_model_path, output_path)

def main():
    root_dir = "../products"  # Change this to your directory path
    for subdir, dirs, files in os.walk(root_dir):
        if subdir != root_dir:  # Check if not the root directory
            process_directory(subdir)

if __name__ == "__main__":
    main()